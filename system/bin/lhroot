#!/system/bin/sh
# Terminal Magisk Mod Template
# by veez21 @ xda-developers


# Magisk Module ID **
ID="lhroot"

# Detect root
_name=$(basename $0)
ls /data >/dev/null 2>&1 || { echo "$ID needs to run as root!"; echo "type 'su' then '$_name'"; exit 1; }

# Magisk Mod Directory
[ -d "/sbin/.magisk" ] && MOUNTPATH="/sbin/.magisk/modules" || MOUNTPATH="$(find /dev -mindepth 2 -maxdepth 2 -type d -name ".magisk")/modules"
MODDIR="$MOUNTPATH/$ID"
[ ! -d $MODDIR ] && { echo "Module not detected!"; exit 1; }

# Set path to your busybox if applicable
_bb=

# Load mod-util.sh
. $MODDIR/mod-util.sh || exit $?

# Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
# > Logs should go in this file
LOG=/data/local/tmp/$ID.log
oldLOG=/data/local/tmp/$ID-old.log
# > Verbose output goes here
VERLOG=/data/local/tmp/$ID-verbose.log
oldVERLOG=/data/local/tmp/$ID-verbose-old.log
stdoutLOG=$MODDIR/logs/$ID-STDOUT.log
oldstdoutLOG=$MODDIR/logs/$ID-STDOUT-old.log

# Start Logging verbosely
mv -f $VERLOG $oldVERLOG 2>/dev/null; mv -f $LOG $oldLOG 2>/dev/null; mv -f $stdoutLOG $oldstdoutLOG 2>/dev/null
# exec 3>&1
# exec 1>$stdoutLOG
set -x 2>$VERLOG

# Main
# > You can start your MOD here.
# > You can add functions, variables & etc.
# > Rather than editing the default vars above.

fetch_dist () {
    distro=${1}
    folder="/data/${distro}"
    tmp=/data/local/tmp
    tarball=${tmp}/${distro}.tar.gz
    local url=''
    if [ ! -d ${folder} ]; then
        if [ ! -f ${tarball} ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm)
                    archurl="armv7" ;;
                arm64)
                    archurl="aarch64" ;;
                x86)
                    archurl="x86" ;;
                x64)
                    archurl="x86_64" ;;
                *)
                    abort "unknown arch" ;;
            esac
            case $distro in
                alpine)
                    wget "https://dl-cdn.alpinelinux.org/alpine/v3.15/releases/${archurl}/alpine-minirootfs-3.15.4-${archurl}.tar.gz" -qO $tarball & e_spinner
                ;;
                debian)
                    wget "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Debian/${archurl}/debian-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
                ;;
                ubuntu)
                    "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Ubuntu/${archurl}/ubuntu-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
                ;;
                void)
                    "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Void/${archurl}/void-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
                ;;
                arch)
                "https://sg.mirror.archlinuxarm.org/os/ArchLinuxARM-${archurl}-latest.tar.gz" -qO $tarball & e_spinner
                "https://mirrors.edge.kernel.org/archlinux/iso/2022.05.01/archlinux-bootstrap-2022.05.01-${archurl}.tar.gz" -qO $tarball & e_spinner

                ;;
                manjaro)
                    if [ "$ARCH" == "arm64" ]; then
                        wget "https://archive.org/download/manjaro-rootfs-arm64.tar/manjaro-rootfs-arm64.tar.xz"
                    else
                        echo "Not available for your architecture"
                        exit 1;
                    fi
                ;;
                kali)
                    wget "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Kali/${archurl}/kali-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
                ;;
                fedora)
                    wget "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Fedora/${archurl}/fedora-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
                ;;


}

alpine () {
	folder="/data/alpine"
    tmp="/data/local/tmp"
	tarball="$tmp/alpine.tar.gz"
	archurl=
	if [ -d "$folder" ]; then
	  first=1
      echo "skipping downloading"
	fi
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm)
                    archurl="armv7" ;;
                arm64)
                    archurl="aarch64" ;;
                x86)
                    archurl="x86" ;;
                x64)
                    archurl="x86_64" ;;
                *)
                    abort "unknown arch" ;;
            esac
            wget "https://dl-cdn.alpinelinux.org/alpine/v3.15/releases/${archurl}/alpine-minirootfs-3.15.4-${archurl}.tar.gz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xf ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Alpine with the bootlinux script"
}

debian () {
    folder="/data/debian"
    if [ -d "$folder" ]; then
        first=1
        echo "skipping downloading"
    fi
    tmp="/data/local/tmp"
    tarball="$tmp/debian.tar.xz"
    archurl=
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
           echo "Downloading Rootfs, please wait..."
           case $ARCH in
               arm)
                   archurl="armhf" ;;
               arm64)
                   archurl="arm64" ;;
               x86)
                   archurl="i386" ;;
               x64)
                   archurl="amd64" ;;
               *)
                   abort "unknown arch" ;;
            esac
            wget "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Debian/${archurl}/debian-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Debian with the bootlinux script"
}

ubuntu () {
    folder="/data/ubuntu"
    if [ -d "$folder" ]; then
        first=1
        echo "skipping downloading"
    fi
    tmp="/data/local/tmp"
    tarball="$tmp/ubuntu.tar.xz"
    archurl=
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm)
                    archurl="armhf" ;;
                arm64)
                    archurl="arm64" ;;
                x86)
                    archurl="i386" ;;
                x64)
                    archurl="amd64" ;;
                *)
                    abort "unknown arch"
            esac
            wget "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Ubuntu/${archurl}/ubuntu-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Ubuntu with the bootlinux script"
}

void () {
    folder="/data/void"
    if [ -d "$folder" ]; then
        first=1
        echo "skipping downloading"
    fi
    tmp="/data/local/tmp"
    tarball="$tmp/void.tar.xz"
    archurl=
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm)
                    archurl="armhf" ;;
                arm64)
                    archurl="arm64" ;;
                x86)
                    archurl="i386" ;;
                x64)
                    archurl="amd64" ;;
                *)
                    abort "unknown arch" ;;
            esac
            wget "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Void/${archurl}/void-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Void with bootlinux script"
}

arch_arm () {
    folder="/data/arch"
    if [ -d "$folder" ]; then
        first=1
        echo "skipping downloading"
    fi
    tmp="/data/local/tmp"
    tarball="$tmp/arch.tar.gz"
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            archurl=
            case $ARCH in
                arm)
                    archurl="armv7" ;;
                arm64)
                    archurl="aarch64" ;;
                *)
                    abort "unknown arch, maybe your arch is x64?"
            esac
                wget "https://sg.mirror.archlinuxarm.org/os/ArchLinuxARM-${archurl}-latest.tar.gz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xf ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch launch Arch Linux with the bootlinux script"
}

arch_64 () {
    folder="/data/arch"
    if [ -d "$folder" ]; then
        first=1
        echo "skipping downloading"
    fi
    tmp="/data/local/tmp"
    tarball="$tmp/arch.tar.gz"
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            archurl=
            case $ARCH in
                x64)
                    archurl="x86_64" ;;
                *)
                    abort "Unknown arch, maybe your arch is x86 or arm?" ;;
            esac
            wget "https://mirrors.edge.kernel.org/archlinux/iso/2022.05.01/archlinux-bootstrap-2022.05.01-${archurl}.tar.gz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xf ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Arch Linux with the bootlinux script"
}

manjaro () {
    folder="/data/manjaro"
    if [ -d "$folder" ]; then
        first=1
        echo "skipping downloading"
    fi
    tmp="/data/local/tmp"
    tarball="$tmp/manjaro.tar.xz"
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm64)
                    archurl="https://archive.org/download/manjaro-rootfs-arm64.tar/manjaro-rootfs-arm64.tar.xz" ;;
                *)
                    abort "Only Support ARM64" ;;
            esac
            wget $archurl -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        tar xf ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Manjaro with the bootlinux script"
}

kali () {
    folder="/data/kali"
    if [ -d "$folder" ]; then
        first=1
        echo "skipping downloading"
    fi
    tmp="/data/local/tmp"
    tarball="$tmp/kali.tar.xz"
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            archurl=
            case $ARCH in
                arm)
                    archurl="armhf" ;;
                arm64)
                    archurl="arm64" ;;
                x86)
                    archurl="i386" ;;
                x64)
                    archurl="amd64" ;;
                *)
                    abort "unknown arch" ;;
            esac
            wget "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Kali/${archurl}/kali-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space"
    rm $tarball
    echo "You can now launch Kali with bootlinux script"
}

fedora () {
    folder="/data/fedora"
    if [ -d "$folder" ]; then
        first=1
        echo "skipping downloading"
    fi
    tmp="/data/local/tmp"
    tarball="$tmp/fedora.tar.xz"
    if [ "$first" != 1 ]; then
        if [ ! -f $tarball ]; then
            echo "Downloading Rootfs, please wait..."
            case $ARCH in
                arm)
                    archurl="armhf" ;;
                arm64)
                    archurl="arm64" ;;
                x64)
                    archurl="amd64" ;;
                *)
                    abort "unknown/unsupported arch" ;;
            esac
            wget "https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Fedora/${archurl}/fedora-rootfs-${archurl}.tar.xz" -qO $tarball & e_spinner
        fi
        mkdir -p "$folder"
        cd "$folder"
        echo "Decompressing Rootfs..."
        tar xfJ ${tarball} 2> /dev/null||:
        cd $HOME
    fi
    echo "Removing rootfs tarball for some space..."
    rm $tarball
    echo "You can now launch Fedora with bootlinux script"
}

install_chroot () {
    clear
    while true; do
        echo "$div"
        title_div "Install which distro?"
        echo "$div"
        echo "0. Back"
        echo "1. Arch Linux ARM"
        echo "2. Arch Linux x64"
        echo "3. Alpine Linux"
        echo "4. Debian"
        echo "5. Fedora"
        echo "6. Kali Linux"
        echo "7. Manjaro"
        echo "8. Ubuntu"
        echo "9. Void Linux"
        read -r choice?'--> '
        echo " "
        case $choice in
            0) break 3;;
            1) arch_arm ;;
            2) arch_64 ;;
            3) alpine ;;
            4) debian ;;
            5) fedora ;;
            6) kali ;;
            7) manjaro ;;
            8) ubuntu ;;
            9) void ;;
        esac
    done
}

remove_chroot () {
    installed=false
    alpine="/data/alpine"
    debian="/data/debian"
    ubuntu="/data/ubuntu"
    arch="/data/arch"
    kali="/data/kali"
    fedora="/data/fedora"
    manjaro="/data/manjaro"
    void="/data/void"
    if [ -d "$alpine" ]; then
        installed=true
        lmount=$alpine
    elif [ -d "$debian" ]; then
        installed=true
        lmount=$debian
    elif [ -d "$ubuntu" ]; then
        installed=true
        lmount=$ubuntu
    elif [ -d "$arch" ]; then
        installed=true
        lmount=$arch
    elif [ -d "$kali" ]; then
        installed=true
        lmount=$kali
    elif [ -d "$fedora" ]; then
        installed=true
        lmount=$fedora
    elif [ -d "$manjaro" ]; then
        installed=true
        lmount=$manjaro
    elif [ -d "$void" ]; then
        installed=true
        lmount=$void
    else
        :
    fi
    if [ $installed ]; then
        killlinux
        echo "If dev is not successfully unmounted, please reboot your device or your device will be freezed."
        sleep 1
        echo "I give you 15 seconds to reboot your device if dev is not successfully unmounted."
        sleep 1
        echo "After reboot, you can rerun this script or remove chroot yourself with 'rm -rf /data/<chroot folder>' command"
        sleep 15
        rm -rf $lmount
    else
        echo "No chroot installed"
    fi
}

mod_head
echo " "

test_connection || abort "This module requires internet for running!"

while true; do
    echo "$div"
    title_div "Chroot Installer"
    echo "$div"
    title_div "Choose Option"
    echo "$div"
    echo "1. Install Chroot"
    echo "2. Remove Chroot"
    echo "q. quit"
    read -r choice?'--> '
    echo " "
    case $choice in
        1) install_chroot ;;
        2) remove_chroot ;;
        q) exit 0 ;;
    esac
done


