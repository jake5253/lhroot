#!/system/bin/sh
# Terminal Magisk Mod Template
# by veez21 @ xda-developers


# Magisk Module ID **
ID="lhroot"

# Detect root
_name=$(basename $0)
ls /data >/dev/null 2>&1 || { echo "$ID needs to run as root!"; echo "type 'su' then '$_name'"; exit 1; }

# Magisk Mod Directory
[ -d "/sbin/.magisk" ] && MOUNTPATH="/sbin/.magisk/modules" || MOUNTPATH="$(find /dev -mindepth 2 -maxdepth 2 -type d -name ".magisk")/modules"
MODDIR="$MOUNTPATH/$ID"
[ ! -d $MODDIR ] && { echo "Module not detected!"; exit 1; }

# Set path to your busybox if applicable
_bb=

# Load mod-util.sh
. $MODDIR/mod-util.sh || exit $?

# Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
# > Logs should go in this file
LOG=/data/local/tmp/$ID.log
oldLOG=/data/local/tmp/$ID-old.log
# > Verbose output goes here
VERLOG=/data/local/tmp/$ID-verbose.log
oldVERLOG=/data/local/tmp/$ID-verbose-old.log
stdoutLOG=$MODDIR/logs/$ID-STDOUT.log
oldstdoutLOG=$MODDIR/logs/$ID-STDOUT-old.log

# Start Logging verbosely
mv -f $VERLOG $oldVERLOG 2>/dev/null; mv -f $LOG $oldLOG 2>/dev/null; mv -f $stdoutLOG $oldstdoutLOG 2>/dev/null
# exec 3>&1
# exec 1>$stdoutLOG
set -x 2>$VERLOG

# Main
# > You can start your MOD here.
# > You can add functions, variables & etc.
# > Rather than editing the default vars above.

fetch_dist () {
    distro=${1}
    folder=/data/${distro}
    tmp=/data/local/tmp
    tarball=${tmp}/${distro}.tar.gz
    url=''
    if [ ! -d "${folder}" ]; then
        if [ ! -f "${tarball}" ]; then
            echo "Downloading Rootfs, please wait..."
            case "${distro}" in
                alpine)
                    case "${ARCH}" in
                        arm)
                            archurl="armv7" ;;
                        arm64)
                            archurl="aarch64" ;;
                        x86)
                            archurl="x86" ;;
                        x64)
                            archurl="x86_64" ;;
                        *)
                            abort "unknown arch" ;;
                    esac
                    url="https://dl-cdn.alpinelinux.org/alpine/v3.15/releases/${archurl}/alpine-minirootfs-3.15.4-${archurl}.tar.gz"
                ;;
                debian)
                    case $ARCH in
                        arm)
                            archurl="armhf" ;;
                        arm64)
                            archurl="arm64" ;;
                        x86)
                            archurl="i386" ;;
                        x64)
                            archurl="amd64" ;;
                        *)
                            abort "unknown arch" ;;
                    esac
                    url="https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Debian/${archurl}/debian-rootfs-${archurl}.tar.xz"
                ;;
                ubuntu)
                    case $ARCH in
                        arm)
                            archurl="armhf" ;;
                        arm64)
                            archurl="arm64" ;;
                        x86)
                            archurl="i386" ;;
                        x64)
                            archurl="amd64" ;;
                        *)
                            abort "unknown arch"
                    esac
                    url="https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Ubuntu/${archurl}/ubuntu-rootfs-${archurl}.tar.xz"
                ;;
                void)
                    case $ARCH in
                        arm)
                            archurl="armhf" ;;
                        arm64)
                            archurl="arm64" ;;
                        x86)
                            archurl="i386" ;;
                        x64)
                            archurl="amd64" ;;
                        *)
                            abort "unknown arch" ;;
                    esac
                    url="https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Void/${archurl}/void-rootfs-${archurl}.tar.xz"
                ;;
                arch)
                    case $ARCH in
                        arm)
                            archurl="armv7"
                            url="https://sg.mirror.archlinuxarm.org/os/ArchLinuxARM-${archurl}-latest.tar.gz"
                        ;;
                        arm64)
                            archurl="aarch64"
                            url="https://sg.mirror.archlinuxarm.org/os/ArchLinuxARM-${archurl}-latest.tar.gz"
                        ;;
                        x64)
                            archurl="x86_64"
                            url="https://mirrors.edge.kernel.org/archlinux/iso/2022.05.01/archlinux-bootstrap-2022.05.01-${archurl}.tar.gz"
                        ;;
                        *)
                            abort "unknown arch, maybe your arch is x64?"
                    esac
                ;;
                manjaro)
                    case $ARCH in
                        arm64)
                            url="https://archive.org/download/manjaro-rootfs-arm64.tar/manjaro-rootfs-arm64.tar.xz" ;;
                        *)
                            abort "Only Support ARM64" ;;
                    esac
                ;;
                kali)
                    case $ARCH in
                        arm)
                            archurl="armhf" ;;
                        arm64)
                            archurl="arm64" ;;
                        x86)
                            archurl="i386" ;;
                        x64)
                            archurl="amd64" ;;
                        *)
                            abort "unknown arch" ;;
                    esac
                    url="https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Kali/${archurl}/kali-rootfs-${archurl}.tar.xz"
                ;;
                fedora)
                    case $ARCH in
                        arm)
                            archurl="armhf" ;;
                        arm64)
                            archurl="arm64" ;;
                        x64)
                            archurl="amd64" ;;
                        *)
                            abort "unknown/unsupported arch" ;;
                    esac
                    url="https://raw.githubusercontent.com/FerryAr/lhroot-repo/main/Rootfs/Fedora/${archurl}/fedora-rootfs-${archurl}.tar.xz"
                ;;
                esac

            wget ${url} -qO $tarball & e_spinner
            fi
        mkdir -p "${folder}"
        cd "${folder}" || abort "Folder could not be found"
        echo "Decompressing Rootfs..."
        tar xf "${tarball}" 2> /dev/null||:
        cd "${HOME}" || abort '$HOME not found'
    fi
    echo "Removing rootfs tarball"
    rm $tarball
    echo "You can now launch ${distro} with the bootlinux script"
}

install_chroot () {
    clear
    while true; do
        echo "$div"
        title_div "Install which distro?"
        echo "$div"
        echo "0. Back"
        echo "1. Arch Linux"
        echo "2. Alpine Linux"
        echo "3. Debian"
        echo "4. Fedora"
        echo "5. Kali Linux"
        echo "6. Manjaro"
        echo "7. Ubuntu"
        echo "8. Void Linux"
        read -r choice?'--> '
        echo " "
        case $choice in
            0) break 3;;
            1) distro=arch ;;
            2) distro=alpine ;;
            3) distro=debian ;;
            4) distro=fedora ;;
            5) distro=kali ;;
            6) distro=manjaro ;;
            7) distro=ubuntu ;;
            8) distro=void ;;
        esac
        fetch_dist $distro
    done
}

remove_chroot () {
    installed=false
    alpine="/data/alpine"
    debian="/data/debian"
    ubuntu="/data/ubuntu"
    arch="/data/arch"
    kali="/data/kali"
    fedora="/data/fedora"
    manjaro="/data/manjaro"
    void="/data/void"
    if [ -d "$alpine" ]; then
        installed=true
        lmount=$alpine
    elif [ -d "$debian" ]; then
        installed=true
        lmount=$debian
    elif [ -d "$ubuntu" ]; then
        installed=true
        lmount=$ubuntu
    elif [ -d "$arch" ]; then
        installed=true
        lmount=$arch
    elif [ -d "$kali" ]; then
        installed=true
        lmount=$kali
    elif [ -d "$fedora" ]; then
        installed=true
        lmount=$fedora
    elif [ -d "$manjaro" ]; then
        installed=true
        lmount=$manjaro
    elif [ -d "$void" ]; then
        installed=true
        lmount=$void
    else
        :
    fi
    if [ $installed ]; then
        killlinux
        echo "If dev is not successfully unmounted, please reboot your device or your device will be frozen."
        sleep 1
        echo "I give you 15 seconds to reboot your device if dev is not successfully unmounted."
        sleep 1
        echo "After reboot, you can rerun this script or remove chroot yourself with 'rm -rf /data/<chroot folder>' command"
        sleep 15
        rm -rf $lmount
    else
        echo "No chroot installed"
    fi
}

mod_head
echo " "

test_connection || abort "This module requires internet for running!"

while true; do
    echo "$div"
    title_div "Chroot Installer"
    echo "$div"
    title_div "Choose Option"
    echo "$div"
    echo "1. Install Chroot"
    echo "2. Remove Chroot"
    echo "q. quit"
    read -r choice?'--> '
    echo " "
    case $choice in
        1) install_chroot ;;
        2) remove_chroot ;;
        q) exit 0 ;;
    esac
done


